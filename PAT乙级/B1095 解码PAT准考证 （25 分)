PAT 准考证号由 4 部分组成：

第 1 位是级别，即 T 代表顶级；A 代表甲级；B 代表乙级；
	第 2~4 位是考场编号，范围从 101 到 999；
	第 5~10 位是考试日期，格式为年、月、日顺次各占 2 位；
	最后 11~13 位是考生编号，范围从 000 到 999。
现给定一系列考生的准考证号和他们的成绩，请你按照要求输出各种统计信息。

输入格式：

输入首先在一行中给出两个正整数 N（≤10​4​​）和 M（≤100），分别为考生人数和统计要求的个数。

接下来 N 行，每行给出一个考生的准考证号和其分数（在区间 [0,100] 内的整数），其间以空格分隔。

考生信息之后，再给出 M 行，每行给出一个统计要求，格式为：类型 指令，其中

类型 为 1 表示要求按分数非升序输出某个指定级别的考生的成绩，对应的 指令 则给出代表指定级别的字母；
	类型 为 2 表示要求将某指定考场的考生人数和总分统计输出，对应的 指令 则给出指定考场的编号；
	类型 为 3 表示要求将某指定日期的考生人数分考场统计输出，对应的 指令 则给出指定日期，格式与准考证上日期相同。
输出格式：

对每项统计要求，首先在一行中输出 Case #: 要求，其中 # 是该项要求的编号，从 1 开始；要求 即复制输入给出的要求。随后输出相应的统计结果：

类型 为 1 的指令，输出格式与输入的考生信息格式相同，即 准考证号 成绩。对于分数并列的考生，按其准考证号的字典序递增输出（题目保证无重复准考证号）；
	类型 为 2 的指令，按 人数 总分 的格式输出；
	类型 为 3 的指令，输出按人数非递增顺序，格式为 考场编号 总人数。若人数并列则按考场编号递增顺序输出。
如果查询结果为空，则输出 NA。

输入样例：

8 4B123180908127 99B102180908003 86A112180318002 98T107150310127 62A107180908108 100T123180908010 78B112160918035 88A107180908021 981 A2 1073 1809082 999

输出样例：

Case 1: 1 AA107180908108 100A107180908021 98A112180318002 98Case 2: 2 1073 260Case 3: 3 180908107 2123 2102 1Case 4: 2 999NA

思路：本体严格控制运行时间和内存，如果先把所有考生按各问题类型存储并排好序，会导致三组case超时，因此，先把所有考生存储起来，根据问题类型筛选出有效数据，进行处理和排序输出。

第一种问题：将考生按照考试级别存储到vector中，在排序输出。

第二种问题：根据考场号，统计该考场号下的考生总人数和总成绩输出。

第三种问题：根据日期先把符合日期的考生存入map中，然后在push到vector中排序输出。考虑时间限制问题，使用unordered_map。

排序函数使用引用型，加快速度，输出vector数组时，使用printf（），如果使用cout也会超时。

参考代码：
--------------------- 
#include<cstdio>
#include<string>
#include<iostream>
#include<vector>
#include<unordered_map>
#include<algorithm>
using namespace std;
int n,m;
struct node{	
	string idx;
	int value;
	node(string id="",int v=0):idx(id),value(v){}
}stu[10010];
bool cmp(const node& a,const node& b){
	if(a.value!=b.value) return a.value>b.value;
	else return a.idx<b.idx;
}
int main()
{
	cin>>n>>m;
	string cardNum;
	int score;
	for(int i=0;i<n;i++)
		cin>>stu[i].idx>>stu[i].value;
	int idx;
	string str;
	for(int i=1;i<=m;i++){
		int cnt=0,sum=0;
		vector<node> ans;
		cin>>idx>>str;
		cout<<"Case "<<i<<": "<<idx<<" "<<str<<endl;
		if(idx==1){
			for(int j=0;j<n;j++){
				if(stu[j].idx[0]==str[0])
					ans.push_back(node(stu[j].idx,stu[j].value));
			}
			sort(ans.begin(),ans.end(),cmp);
			if(ans.size()==0) printf("NA\n");
			else{
				for(int j=0;j<ans.size();j++)
					printf("%s %d\n",ans[j].idx.c_str(),ans[j].value);
			}
		}else if(idx==2){
			for(int j=0;j<n;j++){
				if(stu[j].idx.substr(1,3)==str){
					cnt++;
					sum+=stu[j].value;
				}
			}
			if(cnt==0) printf("NA\n");
			else printf("%d %d\n",cnt,sum);
		}else if(idx==3){
			unordered_map<string,int> mp;
			for(int j=0;j<n;j++){
				if(stu[j].idx.substr(4,6)==str){
					mp[stu[j].idx.substr(1,3)]++;
				}
			}
			for(auto it=mp.begin() ;it!=mp.end();it++)
				ans.push_back(node(it->first,it->second));
			sort(ans.begin(),ans.end(),cmp);
			if(ans.size()==0) printf("NA\n");
			else{
				for(int j=0;j<ans.size();j++)
					printf("%s %d\n",ans[j].idx.c_str(),ans[j].value);
			}
		}
	}
	return 0;
}
