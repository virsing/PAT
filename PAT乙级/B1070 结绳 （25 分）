给定一段一段的绳子，你需要把它们串成一条绳。每次串连的时候，是把两段绳子对折，再如下图所示套接在一起。这样得到的绳子又被当成是另一段绳子，可以再次对折去跟另一段绳子串连。每次串连后，原来两段绳子的长度就会减半。



给定 N 段绳子的长度，你需要找出它们能串成的绳子的最大长度。

输入格式：

每个输入包含 1 个测试用例。每个测试用例第 1 行给出正整数 N (2≤N≤10​4​​)；第 2 行给出 N 个正整数，即原始绳段的长度，数字间以空格分隔。所有整数都不超过10​4​​。

输出格式：

在一行中输出能够串成的绳子的最大长度。结果向下取整，即取为不超过最大长度的最近整数。

输入样例：

810 15 12 3 4 13 1 15

输出样例：

14


思路：由于越早加入的绳子对折的次数越多，因此最终也就会越短，所以先把短的绳子加入，然后再放长的绳子，具体实现可以使用一个优先级队列（升序方式），每次取出较小的两个数，对折再放进去，直到只剩下一个数字为止。

参考代码：
--------------------- 
#include<cstdio>
#include<queue>
using namespace std;
int n,t;
priority_queue<int,deque<int>,greater<int> > q;
int main()
{
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&t);
		q.push(t);
	}
	while(q.size()>1){
		int a=q.top();q.pop();
		int b=q.top();q.pop();
		q.push((a+b)/2);
	}
	printf("%d\n",q.top());
	return 0;
}
