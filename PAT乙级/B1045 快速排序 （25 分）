著名的快速排序算法里有一个经典的划分过程：我们通常采用某种方法取一个元素作为主元，通过交换，把比主元小的元素放到它的左边，比主元大的元素放到它的右边。 给定划分后的 N 个互不相同的正整数的排列，请问有多少个元素可能是划分前选取的主元？

例如给定 $N = 5$, 排列是1、3、2、4、5。则：

1 的左边没有元素，右边的元素都比它大，所以它可能是主元；
	尽管 3 的左边元素都比它小，但其右边的 2 比它小，所以它不能是主元；
	尽管 2 的右边元素都比它大，但其左边的 3 比它大，所以它不能是主元；
	类似原因，4 和 5 都可能是主元。
因此，有 3 个元素可能是主元。

输入格式：

输入在第 1 行中给出一个正整数 N（≤10​5​​）； 第 2 行是空格分隔的 N 个不同的正整数，每个数不超过 10​9​​。

输出格式：

在第 1 行中输出有可能是主元的元素个数；在第 2 行中按递增顺序输出这些元素，其间以 1 个空格分隔，行首尾不得有多余空格。

输入样例：

51 3 2 4 5

输出样例：

31 4 5

题意：找出数组中所有满足条件的A[i],其中A[i]比左边最大值要大，比右边最小值要小，统计个数，并按顺序分别输出这些元素。

思路：使用两个数组，一个leftMax[]统计元素左边的最大值不包括自身，rightMin[]统计右边的最小值，然后遍历数组A[]，找出满足该元素leftMax[i]小于A[i]并且rightMin[i]大于A[i]的所有元素，统计并分别输出。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
using namespace std;
const int inf=(1<<31)-1;
int A[100010],leftMax[100010],rightMin[100010];
int main()
{
	int n,t,cnt=0;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&A[i]);
		if(i>0) leftMax[i]=max(A[i-1],leftMax[i-1]);
	}
	fill(rightMin,rightMin+n,inf);	//一定要初始化为最大值
	for(int i=n-1;i>=0;i--){
		if(i<n-1) rightMin[i]=min(A[i+1],rightMin[i+1]);
		if(leftMax[i]<A[i]&&rightMin[i]>A[i])
			cnt++;
	}
	printf("%d\n",cnt);
	for(int i=0;i<n;i++){
		if(leftMax[i]<A[i]&&rightMin[i]>A[i]){
			if(cnt==1) printf("%d",A[i]);
			else if(cnt) printf("%d ",A[i]);
			cnt--;
		}
	}
	printf("\n");	//当满足条件的元素为0个时，要输出一个空行
	return 0;
}
