本题要求实现一种数字加密方法。首先固定一个加密用正整数 A，对任一正整数 B，将其每 1 位数字与 A 的对应位置上的数字进行以下运算：对奇数位，对应位的数字相加后对 13 取余——这里用 J 代表 10、Q 代表 11、K 代表 12；对偶数位，用 B 的数字减去 A 的数字，若结果为负数，则再加 10。这里令个位为第 1 位。

输入格式：

输入在一行中依次给出 A 和 B，均为不超过 100 位的正整数，其间以空格分隔。

输出格式：

在一行中输出加密后的结果。

输入样例：

1234567 368782971


输出样例：

3695Q8118


思路：注意如果两个数字位数不同，需要让较短的数字高位补零。由于数字太大，需要把数字用字符串读入，然后再反转从第一位开始处理。

参考代码：
--------------------- 
#include<cstdio>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;
int main()
{
	int i=0;
	string A,B,C;
	cin>>A>>B;
	reverse(A.begin(),A.end());
	reverse(B.begin(),B.end());
	for(i=0;i<B.size()||i<A.size();i++){
		int numA=i<A.size()?A[i]-'0':0;
		int numB=i<B.size()?B[i]-'0':0;
		if(i%2==0){
			int t=(numB+numA)%13;
			if(t==10) C+="J";
			else if(t==11) C+="Q";
			else if(t==12) C+="K";
			else C+=t+'0';
		}else{
			int t=numB-numA;
			if(t<0) t+=10;
			C+=t+'0';
		}
	}
	reverse(C.begin(),C.end());
	cout<<C<<endl;
	return 0;
}
