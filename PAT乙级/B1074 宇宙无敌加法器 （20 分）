地球人习惯使用十进制数，并且默认一个数字的每一位都是十进制的。而在 PAT 星人开挂的世界里，每个数字的每一位都是不同进制的，这种神奇的数字称为“PAT数”。每个 PAT 星人都必须熟记各位数字的进制表，例如“……0527”就表示最低位是 7 进制数、第 2 位是 2 进制数、第 3 位是 5 进制数、第 4 位是 10 进制数，等等。每一位的进制 d 或者是 0（表示十进制）、或者是 [2，9] 区间内的整数。理论上这个进制表应该包含无穷多位数字，但从实际应用出发，PAT 星人通常只需要记住前 20 位就够用了，以后各位默认为 10 进制。

在这样的数字系统中，即使是简单的加法运算也变得不简单。例如对应进制表“0527”，该如何计算“6203 + 415”呢？我们得首先计算最低位：3 + 5 = 8；因为最低位是 7 进制的，所以我们得到 1 和 1 个进位。第 2 位是：0 + 1 + 1（进位）= 2；因为此位是 2 进制的，所以我们得到 0 和 1 个进位。第 3 位是：2 + 4 + 1（进位）= 7；因为此位是 5 进制的，所以我们得到 2 和 1 个进位。第 4 位是：6 + 1（进位）= 7；因为此位是 10 进制的，所以我们就得到 7。最后我们得到：6203 + 415 = 7201。

输入格式：

输入首先在第一行给出一个 N 位的进制表（0 < N ≤ 20），以回车结束。 随后两行，每行给出一个不超过 N 位的非负的 PAT 数。

输出格式：

在一行中输出两个 PAT 数之和。

输入样例：

3052706203415

输出样例：

7201


思路：由于是大数加法，因此必须使用字符串，为了简化操作，可以对较短的字符串高位补零，让长度相等再做加法，加法执行完毕后，注意可能还会有进位，因此需要额外判断处理，最后如果答案中有前导零，需要去掉多余的零。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
#include<iostream>
#include<string>
using namespace std;
int main()
{
	string scale,a,b,ans="";		//scale存放进位
	cin>>scale>>a>>b;
	reverse(scale.begin(),scale.end());
	reverse(a.begin(),a.end());
	reverse(b.begin(),b.end());
	if(a.size()<b.size()) swap(a,b);		//保证a中较长
	while(a.size()!=b.size()) b+='0';		//对短的补零
	int i=0,carry=0;
	while(i<a.size()&&i<b.size()){
		int t=a[i]-'0'+b[i]-'0'+carry;
		if(scale[i]=='0'){
			carry=t/10;
			ans+=t%10+'0';
		}else{
			carry=t/(scale[i]-'0');
			ans+=t%(scale[i]-'0')+'0';
		}
		i++;
	}
	if(carry>0)				//最后进位处理
		ans+=carry+'0';
	reverse(ans.begin(),ans.end());
	while(ans.size()>1&&ans[0]=='0') ans.erase(0,1);	//除前导0
	cout<<ans<<endl;
	return 0;
}
