如果某个数 K 的平方乘以 N 以后，结果的末尾几位数等于 K，那么就称这个数为“N-自守数”。例如 3×92​2​​=25392，而 25392 的末尾两位正好是 92，所以 92 是一个 3-自守数。

本题就请你编写程序判断一个给定的数字是否关于某个 N 是 N-自守数。

输入格式：

输入在第一行中给出正整数 M（≤20），随后一行给出 M 个待检测的、不超过 1000 的正整数。

输出格式：

对每个需要检测的数字，如果它是 N-自守数就在一行中输出最小的 N 和 NK​2​​ 的值，以一个空格隔开；否则输出 No。注意题目保证 N<10。

输入样例：

392 5 233

输出样例：

3 253921 25No

思路：写一个判断函数，对于给定的数k，令i从1遍历到10，寻找满足i*k*k的后几位与k相同的i，如果有返回i，否则返回0；

参考代码： 
--------------------- 
#include<cstdio>
using namespace std;
int judge(int k){
	int p=1,a=k;
	while(a){	//k的位数，对应p*10的次数
		a/=10;
		p*=10;
	}
	for(int i=1;i<10;i++){
		int t=i*k*k;
		if(t%p==k)
			return i;
	}
	return 0;
}
int main()
{
	int m,k;
	scanf("%d",&m);
	for(int i=0;i<m;i++){
		scanf("%d",&k);
		int n=judge(k);
		if(n) printf("%d %d\n",n,n*k*k);
		else printf("No\n");
	}
	return 0;
}
