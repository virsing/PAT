给定一个 k+1 位的正整数 N，写成 a​k​​⋯a​1​​a​0​​ 的形式，其中对所有 i 有 0≤a​i​​<10 且 a​k​​>0。N 被称为一个回文数，当且仅当对所有 i 有 a​i​​=a​k−i​​。零也被定义为一个回文数。

非回文数也可以通过一系列操作变出回文数。首先将该数字逆转，再将逆转数与该数相加，如果和还不是一个回文数，就重复这个逆转再相加的操作，直到一个回文数出现。如果一个非回文数可以变出回文数，就称这个数为延迟的回文数。（定义翻译自 https://en.wikipedia.org/wiki/Palindromic_number ）

给定任意一个正整数，本题要求你找到其变出的那个回文数。

输入格式：

输入在一行中给出一个不超过1000位的正整数。

输出格式：

对给定的整数，一行一行输出其变出回文数的过程。每行格式如下

A + B = C


其中 A 是原始的数字，B 是 A 的逆转数，C 是它们的和。A 从输入的整数开始。重复操作直到 C 在 10 步以内变成回文数，这时在一行中输出 C is a palindromic number.；或者如果 10 步都没能得到回文数，最后就在一行中输出 Not found in 10 iterations.。

输入样例 1：

97152


输出样例 1：

97152 + 25179 = 122331122331 + 133221 = 255552255552 is a palindromic number.

输入样例 2：

196


输出样例 2：

196 + 691 = 887887 + 788 = 16751675 + 5761 = 74367436 + 6347 = 1378313783 + 38731 = 5251452514 + 41525 = 9403994039 + 93049 = 187088187088 + 880781 = 10678691067869 + 9687601 = 1075547010755470 + 07455701 = 18211171Not found in 10 iterations.

思路：写一个判断函数judge（）判断给定的字符串是否为回文数，再写一个add（）函数，执行字符串加法，然后模拟计算10次，观察结果。

参考代码：
--------------------- 
#include<cstdio>
#include<cmath>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;
bool judge(string s){
	int n=s.size();
	for(int i=0;i<n/2;i++)
		if(s[i]!=s[n-i-1])
			return false;
	return true;
}
string add(string a,string b){
	string ans="";
	reverse(a.begin(),a.end());
	reverse(b.begin(),b.end());
	int carry=0;
	for(int i=0;i<a.size();i++){
		int t=a[i]-'0'+b[i]-'0'+carry;
		carry=t/10;
		ans+=t%10+'0';
	}
	if(carry) ans+=carry+'0';
	reverse(ans.begin(),ans.end());
	return ans;
}
int main()
{
	int cnt=0,flag=false;
	string a,b,sum;
	cin>>a;
	while(cnt<10&&!judge(a)){
		b=a;
		reverse(b.begin(),b.end());
		sum=add(a,b);
		cout<<a<<" + "<<b<<" = "<<sum<<endl;
		a=sum;
		cnt++;
	}
	if(judge(a)) cout<<a<<" is a palindromic number.\n";
	else cout<<"Not found in 10 iterations.\n";
	return 0;
}
