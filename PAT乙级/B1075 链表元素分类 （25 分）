给定一个单链表，请编写程序将链表元素进行分类排列，使得所有负值元素都排在非负值元素的前面，而 [0, K] 区间内的元素都排在大于 K 的元素前面。但每一类内部元素的顺序是不能改变的。例如：给定链表为 18→7→-4→0→5→-6→10→11→-2，K 为 10，则输出应该为 -4→-6→-2→7→0→5→10→18→11。

输入格式：

每个输入包含一个测试用例。每个测试用例第 1 行给出：第 1 个结点的地址；结点总个数，即正整数N (≤10​5​​)；以及正整数K (≤10​3​​)。结点的地址是 5 位非负整数，NULL 地址用 −1 表示。

接下来有 N 行，每行格式为：

Address Data Next


其中 Address 是结点地址；Data 是该结点保存的数据，为 [−10​5​​,10​5​​] 区间内的整数；Next 是下一结点的地址。题目保证给出的链表不为空。

输出格式：

对每个测试用例，按链表从头到尾的顺序输出重排后的结果链表，其上每个结点占一行，格式与输入相同。

输入样例：

00100 9 1023333 10 2777700000 0 9999900100 18 1230968237 -6 2333333218 -4 0000048652 -2 -199999 5 6823727777 11 4865212309 7 33218

输出样例：

33218 -4 6823768237 -6 4865248652 -2 1230912309 7 0000000000 0 9999999999 5 2333323333 10 0010000100 18 2777727777 11 -1

思路：首先建立结构体存储链表结点，建立三个vector数组，分别存放三个范围的数据，等数据输入完毕后，逐个遍历链表，分类存放到对应vector中，最后把三个vector合并到一起，输出即可。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
#include<vector>
using namespace std;
struct node{
	int addr,data,next;
}L[100010];
vector<node> v1,v2,v3;	//v1存放负值，v2存放0-k数据，v3存放大于k的数
int n,st,k,addr,data,next,p;
int main()
{
	scanf("%d%d%d",&st,&n,&k);
	for(int i=0;i<n;i++){
		scanf("%d",&addr);
		scanf("%d%d",&L[addr].data,&L[addr].next);
		L[addr].addr=addr;
	}
	p=st;
	while(p!=-1){
		if(L[p].data<0) v1.push_back(L[p]);
		else if(L[p].data>k) v3.push_back(L[p]);
		else v2.push_back(L[p]);
		p=L[p].next;
	}
	for(int i=0;i<v2.size();i++)
		v1.push_back(v2[i]);
	for(int i=0;i<v3.size();i++)
		v1.push_back(v3[i]);
	for(int i=0;i<v1.size();i++){
		if(i==0) printf("%05d %d ",v1[i].addr,v1[i].data);
		else printf("%05d\n%05d %d ",v1[i].addr,v1[i].addr,v1[i].data);
	}
	printf("-1\n");
	return 0;
}
