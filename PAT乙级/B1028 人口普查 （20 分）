某城镇进行人口普查，得到了全体居民的生日。现请你写个程序，找出镇上最年长和最年轻的人。

这里确保每个输入的日期都是合法的，但不一定是合理的——假设已知镇上没有超过 200 岁的老人，而今天是 2014 年 9 月 6 日，所以超过 200 岁的生日和未出生的生日都是不合理的，应该被过滤掉。

输入格式：

输入在第一行给出正整数 N，取值在(0,10​5​​]；随后 N 行，每行给出 1 个人的姓名（由不超过 5 个英文字母组成的字符串）、以及按 yyyy/mm/dd（即年/月/日）格式给出的生日。题目保证最年长和最年轻的人没有并列。

输出格式：

在一行中顺序输出有效生日的个数、最年长人和最年轻人的姓名，其间以空格分隔。

输入样例：

5John 2001/05/12Tom 1814/09/06Ann 2121/01/30James 1814/09/05Steve 1967/11/20

输出样例：

3 Tom John


 思路：为简化操作，统一每年时间360天，每个月30天，设置好时间上限和下限，在合理的时间中找出最值即可。

参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
using namespace std;
struct node{
	char name[6];
	int year,month,day,total;
}t,old,young;
int main()
{
	int n,cnt=0,highest=2014*360+8*30+6,lowest=1814*360+8*30+6;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%s %d/%d/%d",&t.name,&t.year,&t.month,&t.day);
		t.total=t.year*360+(t.month-1)*30+t.day;
		if(t.total>highest||t.total<lowest) continue;
		cnt++;
		if(cnt==1){ 
			old=t;
			young=t;
		}
		if(t.total<old.total) old=t;
		if(t.total>young.total) young=t;
	}
	if(cnt==0) printf("0\n");
	else printf("%d %s %s\n",cnt,old.name,young.name);
	return 0;
}
