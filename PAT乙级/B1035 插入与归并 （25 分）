根据维基百科的定义：

插入排序是迭代算法，逐一获得输入数据，逐步产生有序的输出序列。每步迭代中，算法从输入序列中取出一元素，将之插入有序序列中正确的位置。如此迭代直到全部元素有序。

归并排序进行如下迭代操作：首先将原始序列看成 N 个只包含 1 个元素的有序子序列，然后每次迭代归并两个相邻的有序子序列，直到最后只剩下 1 个有序的序列。

现给定原始序列和由某排序算法产生的中间序列，请你判断该算法究竟是哪种排序算法？

输入格式：

输入在第一行给出正整数 N (≤100)；随后一行给出原始序列的 N 个整数；最后一行给出由某排序算法产生的中间序列。这里假设排序的目标序列是升序。数字间以空格分隔。

输出格式：

首先在第 1 行中输出Insertion Sort表示插入排序、或Merge Sort表示归并排序；然后在第 2 行中输出用该排序算法再迭代一轮的结果序列。题目保证每组测试的结果是唯一的。数字间以空格分隔，且行首尾不得有多余空格。

输入样例 1：

103 1 2 8 7 5 9 4 6 01 2 3 7 8 5 9 4 6 0

输出样例 1：

Insertion Sort1 2 3 5 7 8 9 4 6 0

输入样例 2：

103 1 2 8 7 5 9 4 0 61 3 2 8 5 7 4 9 0 6

输出样例 2：

Merge Sort1 2 3 8 4 5 7 9 0 6

题意：给出一个整数序列，然后再给出一个中间序列，让你判断这个中间序列是插入排序产生的还是归并排序产生的，并输出下一轮迭代排序后的序列 。

思路：由于给定序列必是插入排序和归并排序其中之一，并且答案唯一。首先判断插入排序，如果是插入排序的某一轮排序结果，输出其下一轮排序结果，否则判断归并排序，归并排序使用非递归方式简化操作，归并部分使用sort（）代替。

注意，给定的中间序列不包含初始状态，所以要从第二轮排序结果开始比较。

参考代码：
--------------------- 
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
int n;
vector<int> origin,aim,A;
bool InsertSort(){
	int i,j,t,flag=0;
	for(i=1;i<n&&!flag;i++){
		t=A[i];
		if(i!=1&&A==aim) flag=true;	//从第二轮排序结果开始比较；先判断再排序方便得到下一轮结果
		for(j=i-1;j>=0&&t<A[j];j--)
			A[j+1]=A[j];
		A[j+1]=t;
		if(flag) {
			printf("Insertion Sort\n");
			for(int i=0;i<n;i++) {
				if(i==0) printf("%d",A[i]);
				else printf(" %d",A[i]);
			}
			return flag;
		}
	}
	return false;
}
void MergeSort(){
	bool flag=false;
	for(int step=2;step/2<n;step*=2){
		if(step!=2&&A==aim) flag=true;
		for(int i=0;i<n;i+=step)
			sort(A.begin()+i,A.begin()+min(i+step,n));
		if(flag) {
			printf("Merge Sort\n");
			for(int i=0;i<n;i++) {
				if(i==0) printf("%d",A[i]);
				else printf(" %d",A[i]);
			}
			return;
		}
	}
}
int main()
{
	scanf("%d",&n);
	origin.resize(n);
	aim.resize(n);
	for(int i=0;i<n;i++)
		scanf("%d",&origin[i]);
	for(int i=0;i<n;i++)
		scanf("%d",&aim[i]);
	A=origin;
	if(InsertSort()==false){
		A=origin;
		MergeSort();
	}
	return 0;
}
