英国天文学家爱丁顿很喜欢骑车。据说他为了炫耀自己的骑车功力，还定义了一个“爱丁顿数” E ，即满足有 E 天骑车超过 E 英里的最大整数 E。据说爱丁顿自己的 E 等于87。

现给定某人 N 天的骑车距离，请你算出对应的爱丁顿数 E（≤N）。

输入格式：

输入第一行给出一个正整数 N (≤10​5​​)，即连续骑车的天数；第二行给出 N 个非负整数，代表每天的骑车距离。

输出格式：

在一行中给出 N 天的爱丁顿数。

输入样例：

106 7 6 9 3 10 8 2 7 8

输出样例：

6


思路：由于不要求数据必须连续，因此首先对数据按从大到小排序，然后求出连续k天骑行距离超过k的值即可。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn=100010;
int n,k=1,a[maxn];
bool cmp(int a,int b){
	return a>b;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d",&a[i]);
	sort(a+1,a+n+1,cmp);
	while(k<=n&&a[k]>k) k++;
	printf("%d\n",k-1);
	return 0;
}
