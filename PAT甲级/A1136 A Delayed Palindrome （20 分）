Consider a positive integer N written in standard notation with k+1 digits a​i​​ as a​k​​⋯a​1​​a​0​​ with 0≤a​i​​<10 for all i and a​k​​>0. Then N is palindromic if and only if a​i​​=a​k−i​​ for all i. Zero is written 0 and is also palindromic by definition.

Non-palindromic numbers can be paired with palindromic ones via a series of operations. First, the non-palindromic number is reversed and the result is added to the original number. If the result is not a palindromic number, this is repeated until it gives a palindromic number. Such number is called a delayed palindrome. (Quoted from https://en.wikipedia.org/wiki/Palindromic_number )

Given any positive integer, you are supposed to find its paired palindromic number.

Input Specification:

Each input file contains one test case which gives a positive integer no more than 1000 digits.

Output Specification:

For each test case, print line by line the process of finding the palindromic number. The format of each line is the following:

A + B = C


where A is the original number, B is the reversed A, and C is their sum. A starts being the input number, and this process ends until C becomes a palindromic number -- in this case we print in the last line C is a palindromic number.; or if a palindromic number cannot be found in 10 iterations, print Not found in 10 iterations. instead.

Sample Input 1:

97152


Sample Output 1:

97152 + 25179 = 122331122331 + 133221 = 255552255552 is a palindromic number.

Sample Input 2:

196


Sample Output 2:

196 + 691 = 887887 + 788 = 16751675 + 5761 = 74367436 + 6347 = 1378313783 + 38731 = 5251452514 + 41525 = 9403994039 + 93049 = 187088187088 + 880781 = 10678691067869 + 9687601 = 1075547010755470 + 07455701 = 18211171Not found in 10 iterations.

题意：任意给出一个不超过1000位的数，让你判断它是否是一个延迟的回文数 ，设这个数字a，逆置其各位数字之后的数为b，令sum=a+b，如果在10轮计算内sum为回文数称这个数为延迟的回文数，否则就不是。

思路：写一个判断函数judge（）判断给定的字符串是否为回文数，再写一个add（）函数，执行字符串加法，然后模拟计算10次，观察结果。

参考代码：
--------------------- 
#include<cstdio>
#include<cmath>
#include<string>
#include<iostream>
#include<algorithm>
using namespace std;
bool judge(string s){
	int n=s.size();
	for(int i=0;i<n/2;i++)
		if(s[i]!=s[n-i-1])
			return false;
	return true;
}
string add(string a,string b){
	string ans="";
	reverse(a.begin(),a.end());
	reverse(b.begin(),b.end());
	int carry=0;
	for(int i=0;i<a.size();i++){
		int t=a[i]-'0'+b[i]-'0'+carry;
		carry=t/10;
		ans+=t%10+'0';
	}
	if(carry) ans+=carry+'0';
	reverse(ans.begin(),ans.end());
	return ans;
}
int main()
{
	int cnt=0,flag=false;
	string a,b,sum;
	cin>>a;
	while(cnt<10&&!judge(a)){
		b=a;
		reverse(b.begin(),b.end());
		sum=add(a,b);
		cout<<a<<" + "<<b<<" = "<<sum<<endl;
		a=sum;
		cnt++;
	}
	if(judge(a)) cout<<a<<" is a palindromic number.\n";
	else cout<<"Not found in 10 iterations.\n";
	return 0;
}
