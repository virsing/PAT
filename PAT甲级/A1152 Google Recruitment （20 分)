In July 2004, Google posted on a giant billboard along Highway 101 in Silicon Valley (shown in the picture below) for recruitment. The content is super-simple, a URL consisting of the first 10-digit prime found in consecutive digits of the natural constant e. The person who could find this prime number could go to the next step in Google's hiring process by visiting this website.



The natural constant e is a well known transcendental number（超越数）. The first several digits are: e = 2.718281828459045235360287471352662497757247093699959574966967627724076630353547594571382178525166427427466391932003059921... where the 10 digits in bold are the answer to Google's question.

Now you are asked to solve a more general problem: find the first K-digit prime in consecutive digits of any given L-digit number.

Input Specification:

Each input file contains one test case. Each case first gives in a line two positive integers: L (≤ 1,000) and K (< 10), which are the numbers of digits of the given number and the prime to be found, respectively. Then the L-digit number N is given in the next line.

Output Specification:

For each test case, print in a line the first K-digit prime in consecutive digits of N. If such a number does not exist, output 404 instead. Note: the leading zeroes must also be counted as part of the K digits. For example, to find the 4-digit prime in 200236, 0023 is a solution. However the first digit 2 must not be treated as a solution 0002 since the leading zeroes are not in the original number.

Sample Input 1:

20 523654987725541023819

Sample Output 1:

49877


Sample Input 2:

10 32468024680

Sample Output 2:

404

题意：给出一个长度为l的数s（字符串形式读入），让你找出其中第一个长度为k位的质数并输出这个质数，如果不存在输出：404。

思路：首先写一个判断质数的函数judge，接下来从第一位开始遍历这个给定的数 s，并每次截取从当前位置开始长度为k的子串，送入函数judge判断，是否是质数，如果是就输出质数，否则直到遍历结束，如果都没有答案，则输出：404.

参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
#include<string>
#include<iostream>
#include<cmath>
using namespace std;
bool judge(string s){
	int n=stoi(s),sqrtN=sqrt(1.0*n);
	if(n<2) return false;
	for(int i=2;i<=sqrtN;i++){
		if(n%i==0) return false;
	}
	return true;
}
int main()
{
	int l,k,flag=0;
	string s,ans;
	cin>>l>>k>>s;
	for(int i=0;i<=l-k&&!flag;i++){
		ans=s.substr(i,k);
		if(judge(ans)) 
			flag=1;
	}
	if(flag) cout<<ans<<endl;
	else cout<<"404\n";
	return 0;
}
