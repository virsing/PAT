A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:

The left subtree of a node contains only nodes with keys less than or equal to the node's key.
	The right subtree of a node contains only nodes with keys greater than the node's key.
	Both the left and right subtrees must also be binary search trees.
Insert a sequence of numbers into an initially empty binary search tree. Then you are supposed to count the total number of nodes in the lowest 2 levels of the resulting tree.

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (≤1000) which is the size of the input sequence. Then given in the next line are the N integers in [−10001000] which are supposed to be inserted into an initially empty binary search tree.

Output Specification:

For each case, print in one line the numbers of nodes in the lowest 2 levels of the resulting tree in the format:

n1 + n2 = n


where n1 is the number of nodes in the lowest level, n2 is that of the level above, and n is the sum.

Sample Input:

925 30 42 16 20 20 35 -5 28

Sample Output:

2 + 4 = 6


题意：给出n个数，让你建立一棵二叉搜索树，然后输出这棵树的最后两层节点数。

思路：首先建立二叉搜索树，然后使用先序遍历统计每一层节点数，最后输出最后两层即可。

参考代码： 
--------------------- 
#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn=1010;
int n,Count[maxn],maxL=0;
struct node{
	int data;
	node* lchild;
	node* rchild;
	node(int a):data(a),lchild(NULL),rchild(NULL){}
};
void insert(node*& root,int x){
	if(root==NULL){
		root=new node(x);
	}else if(x<=root->data)
		insert(root->lchild,x);
	else 
		insert(root->rchild,x);
}
void DFS(node* root,int d){
	if(root!=NULL){
		Count[d]++;
		maxL=max(maxL,d);
		DFS(root->lchild,d+1);
		DFS(root->rchild,d+1);
	}
}
int main()
{
	int t;
	node* root=NULL;
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&t);
		insert(root,t);
	}
	DFS(root,1);
	printf("%d + %d = %d\n",Count[maxL],Count[maxL-1],Count[maxL]+Count[maxL-1]);
	return 0;
}
