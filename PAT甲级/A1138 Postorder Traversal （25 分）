Suppose that all the keys in a binary tree are distinct positive integers. Given the preorder and inorder traversal sequences, you are supposed to output the first number of the postorder traversal sequence of the corresponding binary tree.

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 50,000), the total number of nodes in the binary tree. The second line gives the preorder sequence and the third line gives the inorder sequence. All the numbers in a line are separated by a space.

Output Specification:

For each test case, print in one line the first number of the postorder traversal sequence of the corresponding binary tree.

Sample Input:

71 2 3 4 5 6 72 3 1 5 4 7 6

Sample Output:

3


题意：给出二叉树的先序和中序序列，让你输出这棵二叉树后序的第一个数。

思路：如果先建树再后序访问输出的话，会超时。考虑到使用先序和中序序列递归建树时，每次碰到叶节点时都是prel==prer，其中prel是先序序列的左边界，prer是先序序列的右边界，即每次到叶结点时，序列中都只有一个数，而后序下的第一个数就是第一个叶结点，因此当第一次碰到prel==prer时输出这个结点数据，即可。

参考代码：
--------------------- 
#include<cstdio>
int pre[50010],in[50010],n,idx=0;	
void create(int prel,int prer,int inl,int inr){
	if(prel>prer) return ;
	if(prel==prer&&!idx){
		printf("%d\n",pre[prel]);
		idx=1;				//idx标记是否已经输出第一个叶结点，输出后令idx=1
	}
	int k=inl;
	while(k<=inr&&in[k]!=pre[prel]) k++;
	int numL=k-inl;
	if(idx) return;				//已输出提前退出
	create(prel+1,prel+numL,inl,k-1);
	if(idx) return;				//已输出提前退出
	create(prel+numL+1,prer,k+1,inr);
}
int main()
{
	scanf("%d",&n);
	for(int i=0;i<n;i++)
		scanf("%d",&pre[i]);
	for(int i=0;i<n;i++)
		scanf("%d",&in[i]);
	create(0,n-1,0,n-1);
	return 0;
}
