Weibo is known as the Chinese version of Twitter. One user on Weibo may have many followers, and may follow many other users as well. Hence a social network is formed with followers relations. When a user makes a post on Weibo, all his/her followers can view and forward his/her post, which can then be forwarded again by their followers. Now given a social network, you are supposed to calculate the maximum potential amount of forwards for any specific user, assuming that only L levels of indirect followers are counted.

Input Specification:

Each input file contains one test case. For each case, the first line contains 2 positive integers: N (≤1000), the number of users; and L (≤6), the number of levels of indirect followers that are counted. Hence it is assumed that all the users are numbered from 1 to N. Then N lines follow, each in the format:

M[i] user_list[i]


where M[i] (≤100) is the total number of people that user[i] follows; and user_list[i] is a list of the M[i] users that followed by user[i]. It is guaranteed that no one can follow oneself. All the numbers are separated by a space.

Then finally a positive K is given, followed by K UserID's for query.

Output Specification:

For each UserID, you are supposed to print in one line the maximum potential amount of forwards this user can triger, assuming that everyone who can view the initial post will forward it once, and that only L levels of indirect followers are counted.

Sample Input:

7 33 2 3 402 5 62 3 12 3 41 41 52 2 6

Sample Output:

45

题意：给出一个微博关注用户的网络，用户id从1-N，假设每个人发微博，其粉丝都会转发，让你求出图中某人发出微博在经历L层的转发后，总计会有多少次转发。 

思路：首先对用户建图模型，然后以某人为始发点执行BFS，进行L层转发，最后输出总的转发次数即可。

参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
using namespace std;
const int maxn=1010;
int n,L,query;
int G[maxn][maxn],vis[maxn];
int BFS(int s){
	memset(vis,0,sizeof(vis));
	int q[maxn],front=-1,rear=-1;
	int last=0,level=0,cnt=0;		//level统计当前访问到第几层，cnt统计总推送次数
	q[++rear]=s;
	vis[s]=1;
	while(front!=rear){
		if(level>=L) break;
		int u=q[++front];	
		for(int v=1;v<=n;v++){
			if(!vis[v]&&G[u][v]){
				q[++rear]=v;;
				vis[v]=1;
				cnt++;
			}
		}
		if(front==last){
			last=rear;
			level++;
		}
	}
	return cnt;
}
int main()
{
	int num,t;
	scanf("%d%d",&n,&L);
	for(int i=1;i<=n;i++){
		scanf("%d",&num);
		for(int j=0;j<num;j++){
			scanf("%d",&t);
			G[t][i]=1;
		}
	}
	scanf("%d",&query);
	for(int i=0;i<query;i++){
		scanf("%d",&t);
		printf("%d\n",BFS(t));
	}
	return 0;
}
