The ranklist of PAT is generated from the status list, which shows the scores of the submissions. This time you are supposed to generate the ranklist for PAT.

Input Specification:

Each input file contains one test case. For each case, the first line contains 3 positive integers, N (≤10​4​​), the total number of users, K (≤5), the total number of problems, and M (≤10​5​​), the total number of submissions. It is then assumed that the user id's are 5-digit numbers from 00001 to N, and the problem id's are from 1 to K. The next line contains K positive integers p[i] (i=1, ..., K), where p[i] corresponds to the full mark of the i-th problem. Then M lines follow, each gives the information of a submission in the following format:

user_id problem_id partial_score_obtained


where partial_score_obtained is either −1 if the submission cannot even pass the compiler, or is an integer in the range [0, p[problem_id]]. All the numbers in a line are separated by a space.

Output Specification:

For each test case, you are supposed to output the ranklist in the following format:

rank user_id total_score s[1] ... s[K]


where rank is calculated according to the total_score, and all the users with the same total_score obtain the same rank; and s[i] is the partial score obtained for the i-th problem. If a user has never submitted a solution for a problem, then "-" must be printed at the corresponding position. If a user has submitted several solutions to solve one problem, then the highest score will be counted.

The ranklist must be printed in non-decreasing order of the ranks. For those who have the same rank, users must be sorted in nonincreasing order according to the number of perfectly solved problems. And if there is still a tie, then they must be printed in increasing order of their id's. For those who has never submitted any solution that can pass the compiler, or has never submitted any solution, they must NOT be shown on the ranklist. It is guaranteed that at least one user can be shown on the ranklist.

Sample Input:

7 4 2020 25 25 3000002 2 1200007 4 1700005 1 1900007 2 2500005 1 2000002 2 200005 1 1500001 1 1800004 3 2500002 2 2500005 3 2200006 4 -100001 2 1800002 1 2000004 1 1500002 4 1800001 3 400001 4 200005 2 -100004 2 0

Sample Output:

1 00002 63 20 25 - 182 00005 42 20 0 22 -2 00007 42 - 25 - 172 00001 42 18 18 4 25 00004 40 15 0 25 -

 

题意：给出n个学生的k门课程分数，以及m次提交记录，让你按照规则进行排名。

排序规则为：①总分不同的按总分降序排列，②总分相同按完美解题数降序排序，③完美解题数也相同按id升序排列。 

输出排名时规则为：①依次输出排名，id，总分，以及各单科分数，总分相同的名次也相同。

②如果某位学生全场无提交记录或者所有提交均未通过编译，则不参与排名也不输出。

③若考生存在通过编译的提交记录，参与排名，但某一门课程的提交均未通过编译，则该门课程记为0分，若无提交记录则该课程输出‘-’。

 

思路：给学生建立结构体

struct node{	int id,total,cnt,score[6],flag;    //total标记总分，cnt记录完美解题数，flag标记是否输出	node(){		memset(this->score,-1,sizeof(this->score));	}}A[10010];

 

为了区分输出时的三种情况，使用flag来标记某位学生是否需要输出，并给课程数组赋初值-1. 如果该学生存在通过编译的记录，令flag=1，需要输出。
	如果该学生某门课程还没有通过编译的记录，并且此次提交仍未通过令该课程为0分。
	若学生的某门课程存在多次提交，则取最高分，如果该学生某门课程此次提交为满分，并且之前取得的最高分小于满分，则让完美解题数加一。
参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
#include<algorithm>
using namespace std;
int full[6],n,m,k;
struct node{
	int id,total,cnt,score[6],flag;
	node(){
		memset(this->score,-1,sizeof(this->score));
	}
}A[10010];
bool cmp(node a,node b){
		if(a.flag!=b.flag) return a.flag>b.flag;
		else if(a.total!=b.total) return a.total>b.total;
		else if(a.cnt!=b.cnt) return a.cnt>b.cnt;
		else return a.id<b.id;
}
int main()
{
	scanf("%d%d%d",&n,&k,&m);
	for(int i=1;i<=k;i++)
		scanf("%d",&full[i]);
	for(int i=0;i<m;i++){
		int u_id,c_id,score;
		scanf("%d%d%d",&u_id,&c_id,&score);
		if(score!=-1) A[u_id].flag=1;
		if(A[u_id].score[c_id]==-1&&score==-1) A[u_id].score[c_id]=0;
		if(score==full[c_id]&&A[u_id].score[c_id]<full[c_id]) A[u_id].cnt++;	//注意记录完美解题次数时该科目分数必须小于满分
		A[u_id].id=u_id;
		A[u_id].score[c_id]=max(A[u_id].score[c_id],score);
	}
	for(int i=1;i<=n;i++){
		for(int j=1;j<=k;j++)
			if(A[i].score[j]!=-1) A[i].total+=A[i].score[j];
	}
	sort(A+1,A+n+1,cmp);
	int r=1;
	for(int i=1;i<=n&&A[i].flag;i++){

		if(i>1&&A[i].total!=A[i-1].total) 	
			r=i;
		printf("%d %05d %d",r,A[i].id,A[i].total);
		for(int j=1;j<=k;j++) {
			if(A[i].score[j]!=-1) printf(" %d",A[i].score[j]);
		else printf(" -");
		}
		printf("\n");
	}
	return 0;
}
