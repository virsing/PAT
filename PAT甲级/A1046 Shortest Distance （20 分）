The task is really simple: given N exits on a highway which forms a simple cycle, you are supposed to tell the shortest distance between any pair of exits.
Input Specification:
Each input file contains one test case. For each case, the first line contains an integer N (in [3,10
​5
​​]), followed by N integer distances D
​1
​​ D
​2
​​ ⋯ D
​N
​​, where D
​i
​​ is the distance between the i-th and the (i+1)-st exits, and D
​N
​​ is between the N-th and the 1st exits. All the numbers in a line are separated by a space. The second line gives a positive integer M (≤10
​4
​​), with M lines follow, each contains a pair of exit numbers, provided that the exits are numbered from 1 to N. It is guaranteed that the total round trip distance is no more than 10
​7
​​.
Output Specification:
For each test case, print your results in M lines, each contains the shortest distance between the corresponding given pair of exits.
Sample Input:
5 1 2 4 14 9
3
1 3
2 5
4 1
Sample Output:
3
10
7

题意：给出n个顶点编号1-n构成一个环路，再给出所有d[i]到d[i+1]的距离（d[n]表示从n到1的距离），任意给出两个顶点编号u，v让你求出这两点的最短距离。

思路：对于给定的两个顶点u，v（假设u<v),只有两条路径u到v和v到u，使用sum[i]数组存放从1到i的距离总和，用sum[0]存放整个环路的距离值，然后做差sum[v]-sum[u],
是一条路径，环路总距离-（sum[v]-sum[u])是另外一条路径。取较小者即可。
参考代码：
#include<cstdio>
#include<vector>
using namespace std;
int main()
{
	int n,q,u,v,d1,d2;
	scanf("%d",&n);
	vector<int> d(n+1,0),sum(n+1,0);
	for(int i=1;i<=n;i++){
		scanf("%d",&d[i]);
		sum[i]=sum[i-1]+d[i-1];
	}
	sum[0]=sum[n]+d[n];	//0号位置存储路径总值
	scanf("%d",&q);
	for(int i=0;i<q;i++){
		scanf("%d%d",&u,&v);
		if(u>v) swap(u,v);
		d1=sum[v]-sum[u];
		d2=sum[0]-d1;
		printf("%d\n",min(d1,d2));
	}
	return 0;
}
