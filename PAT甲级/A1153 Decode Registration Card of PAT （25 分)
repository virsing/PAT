A registration card number of PAT consists of 4 parts:

the 1st letter represents the test level, namely, T for the top level, A for advance and B for basic;
	the 2nd - 4th digits are the test site number, ranged from 101 to 999;
	the 5th - 10th digits give the test date, in the form of yymmdd;
	finally the 11th - 13th digits are the testee's number, ranged from 000 to 999.
Now given a set of registration card numbers and the scores of the card owners, you are supposed to output the various statistics according to the given queries.

Input Specification:

Each input file contains one test case. For each case, the first line gives two positive integers N (≤10​4​​) and M (≤100), the numbers of cards and the queries, respectively.

Then N lines follow, each gives a card number and the owner's score (integer in [0,100]), separated by a space.

After the info of testees, there are M lines, each gives a query in the format Type Term, where

Type being 1 means to output all the testees on a given level, in non-increasing order of their scores. The corresponding Term will be the letter which specifies the level;
	Type being 2 means to output the total number of testees together with their total scores in a given site. The corresponding Term will then be the site number;
	Type being 3 means to output the total number of testees of every site for a given test date. The corresponding Term will then be the date, given in the same format as in the registration card.
Output Specification:

For each query, first print in a line Case #: input, where # is the index of the query case, starting from 1; and input is a copy of the corresponding input query. Then output as requested:

for a type 1 query, the output format is the same as in input, that is, CardNumber Score. If there is a tie of the scores, output in increasing alphabetical order of their card numbers (uniqueness of the card numbers is guaranteed);
	for a type 2 query, output in the format Nt Ns where Nt is the total number of testees and Ns is their total score;
	for a type 3 query, output in the format Site Nt where Site is the site number and Nt is the total number of testees at Site. The output must be in non-increasing order of Nt's, or in increasing order of site numbers if there is a tie of Nt.
If the result of a query is empty, simply print NA.

Sample Input:

8 4B123180908127 99B102180908003 86A112180318002 98T107150310127 62A107180908108 100T123180908010 78B112160918035 88A107180908021 981 A2 1073 1809082 999

Sample Output:

Case 1: 1 AA107180908108 100A107180908021 98A112180318002 98Case 2: 2 1073 260Case 3: 3 180908107 2123 2102 1Case 4: 2 999NA

题意：给出n个pat考生的编号idx和对应的分数，再给出m个问题，问题包括三种类型：

第一种，输出对应级别所有考生的 编号和成绩，按成绩降序排列，如果成绩相同按id升序排列。

第二种，给出某个网站的id，让你输出这个网站上的考生一共有多少个，以及这些考生的总成绩。

第三种，给出某个日期，让你输出这个日期，一共有多少考生，按网站对考生个数进行降序排列，如果网站考生生个数相同，按网站id升序排列。

思路：本体严格控制运行时间和内存，如果先把所有考生按各问题类型存储并排好序，会导致三组case超时，因此，先把所有考生存储起来，根据问题类型，进行处理和排序输出。

第一种问题：将考生按照考试级别存储到vector中，在排序输出。

第二种问题：根据考场号，统计该考场号下的考生总人数和总成绩输出。

第三种问题：根据日期先把符合日期的考生存入map中，然后在push到vector中排序输出。考虑时间限制问题，使用unordered_map。

排序函数使用引用型，加快速度，输出vector数组时，使用printf（），如果使用cout也会超时。

参考代码：
--------------------- 
#include<cstdio>
#include<string>
#include<iostream>
#include<vector>
#include<unordered_map>
#include<algorithm>
using namespace std;
int n,m;
struct node{	
	string idx;
	int value;
	node(string id="",int v=0):idx(id),value(v){}
}stu[10010];
bool cmp(const node& a,const node& b){
	if(a.value!=b.value) return a.value>b.value;
	else return a.idx<b.idx;
}
int main()
{
	cin>>n>>m;
	string cardNum;
	int score;
	for(int i=0;i<n;i++)
		cin>>stu[i].idx>>stu[i].value;
	int idx;
	string str;
	for(int i=1;i<=m;i++){
		int cnt=0,sum=0;
		vector<node> ans;
		cin>>idx>>str;
		cout<<"Case "<<i<<": "<<idx<<" "<<str<<endl;
		if(idx==1){
			for(int j=0;j<n;j++){
				if(stu[j].idx[0]==str[0])
					ans.push_back(node(stu[j].idx,stu[j].value));
			}
			sort(ans.begin(),ans.end(),cmp);
			if(ans.size()==0) printf("NA\n");
			else{
				for(int j=0;j<ans.size();j++)
					printf("%s %d\n",ans[j].idx.c_str(),ans[j].value);
			}
		}else if(idx==2){
			for(int j=0;j<n;j++){
				if(stu[j].idx.substr(1,3)==str){
					cnt++;
					sum+=stu[j].value;
				}
			}
			if(cnt==0) printf("NA\n");
			else printf("%d %d\n",cnt,sum);
		}else if(idx==3){
			unordered_map<string,int> mp;
			for(int j=0;j<n;j++){
				if(stu[j].idx.substr(4,6)==str){
					mp[stu[j].idx.substr(1,3)]++;
				}
			}
			for(auto it=mp.begin() ;it!=mp.end();it++)
				ans.push_back(node(it->first,it->second));
			sort(ans.begin(),ans.end(),cmp);
			if(ans.size()==0) printf("NA\n");
			else{
				for(int j=0;j<ans.size();j++)
					printf("%s %d\n",ans[j].idx.c_str(),ans[j].value);
			}
		}
	}
	return 0;
}
