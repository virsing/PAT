Given any permutation of the numbers {0, 1, 2,..., N−1}, it is easy to sort them in increasing order. But what if Swap(0, *) is the ONLY operation that is allowed to use? For example, to sort {4, 0, 2, 1, 3} we may apply the swap operations in the following way:

Swap(0, 1) => {4, 1, 2, 0, 3}Swap(0, 3) => {4, 1, 2, 3, 0}Swap(0, 4) => {0, 1, 2, 3, 4}

Now you are asked to find the minimum number of swaps need to sort the given permutation of the first N nonnegative integers.

Input Specification:

Each input file contains one test case, which gives a positive N (≤10​5​​) followed by a permutation sequence of {0, 1, ..., N−1}. All the numbers in a line are separated by a space.

Output Specification:

For each case, simply print in a line the minimum number of swaps need to sort the given permutation.

Sample Input:

103 5 7 2 6 4 9 0 8 1

Sample Output:

9


思路：为了简化操作，用数组来存储每个元素的下标， 并在输入数据时统计出多少个错位元素，最后如果错位元素个数num>0并且元素a[0]==0，则令num++，因为0在交换之后也会错位。接下来只要a[0]!=0,就让元素0和他所在的位置对应数字交换，让一个数字归位，如果中途a[0]==0，则找到一个从错位的元素，与a[0]交换，然后再重复以上操作，直到num==1为止。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
using namespace std;
int a[100010];
int main()
{
	int n,t,num=0,cnt=0,k=1;	//num标记错位数字的个数，cnt统计移动次数
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&t);
		a[t]=i;
		if(t!=i) num++;
	}
	if(a[0]==0&&num) num++;	//当错位元素num>0并且a[0]==0,则需要交换0和其他元素位置，错位元素数会加一
	while(num>1){
		if(a[0]==0){
			while(k<n&&a[k]==k) k++;
			swap(a[0],a[k]);
			cnt++;
		}else{
			swap(a[0],a[a[0]]);
			num--;cnt++;
		}
	}
	printf("%d\n",cnt);
	return 0;
}
