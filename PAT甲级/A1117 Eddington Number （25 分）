British astronomer Eddington liked to ride a bike. It is said that in order to show off his skill, he has even defined an "Eddington number", E -- that is, the maximum integer E such that it is for E days that one rides more than E miles. Eddington's own E was 87.

Now given everyday's distances that one rides for N days, you are supposed to find the corresponding E (≤N).

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (≤10​5​​), the days of continuous riding. Then N non-negative integers are given in the next line, being the riding distances of everyday.

Output Specification:

For each case, print in a line the Eddington number for these N days.

Sample Input:

106 7 6 9 3 10 8 2 7 8

Sample Output:

6


题意：给出n个数，表示一个人n天骑行的距离，让你求出他的爱丁顿数，定义爱丁顿数为，在k天里骑行距离超过k的最大k值。

思路：由于不要求数据必须连续，因此首先对数据按从大到小排序，然后求出连续k天骑行距离超过k的值即可。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
using namespace std;
const int maxn=100010;
int n,k=1,a[maxn];
bool cmp(int a,int b){
	return a>b;
}
int main()
{
	scanf("%d",&n);
	for(int i=1;i<=n;i++)
		scanf("%d",&a[i]);
	sort(a+1,a+n+1,cmp);
	while(k<=n&&a[k]>k) k++;
	printf("%d\n",k-1);
	return 0;
}
