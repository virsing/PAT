On a broken keyboard, some of the keys are always stucked. So when you type some sentences, the characters corresponding to those keys will appear repeatedly on screen for k times.

Now given a resulting string on screen, you are supposed to list all the possible stucked keys, and the original string.

Notice that there might be some characters that are typed repeatedly. The stucked key will always repeat output for a fixed k times whenever it is pressed. For example, when k=3, from the string thiiis iiisss a teeeeeest we know that the keys i and e might be stucked, but s is not even though it appears repeatedly sometimes. The original string could be this isss a teest.

Input Specification:

Each input file contains one test case. For each case, the 1st line gives a positive integer k (1<k≤100) which is the output repeating times of a stucked key. The 2nd line contains the resulting string on screen, which consists of no more than 1000 characters from {a-z}, {0-9} and _. It is guaranteed that the string is non-empty.

Output Specification:

For each test case, print in one line the possible stucked keys, in the order of being detected. Make sure that each key is printed once only. Then in the next line print the original string. It is guaranteed that there is at least one stucked key.

Sample Input:

3caseee1__thiiis_iiisss_a_teeeeeest

Sample Output:

eicase1__this_isss_a_teest

题意：给出一个整数k，再给一个字符串，假设键盘中某些键坏了，每次按坏的按键都会重复k次，让你找出这些迟滞键并输出正常的字符串。

注意：如果字符串中某个键曾经出现过正常状态，也出现过k次重复，则认为按键是正常的，另外，某个键必须是k的整数倍才被认为是坏的按键，如果不是整数倍则是正常键。

思路：使用hasht[]标记按键是否完好，正常按键标记为1，第一次遍历字符串标记出坏的按键 ，第二次遍历输出迟滞按键，使用数组isprint[]来保证输出一次，第三次遍历输出正常的字符串。

参考代码：

#include<cstdio>
--------------------- 
#include<cstdio>
#include<string>
#include<iostream>
using namespace std;
int k,hasht[256],isPrint[256];	//hasht标记是否为正常按键，正常为1，isprint标记是否输出过
int main()
{
	string s;
	cin>>k>>s;
	for(int i=0;i<s.size();){
		int flag=1,cnt=1;
		for(int j=i+1;j<s.size()&&s[j]==s[i];j++)
			cnt++;
		if(cnt%k!=0)		//迟滞次数不是k的整数倍均为正常状态
			hasht[s[i]]=1;
		i+=cnt;
	}
	for(int i=0;i<s.size();i++){
		if(!hasht[s[i]]&&!isPrint[s[i]]){	//坏键且没有输出过则输出
			cout<<s[i];
			isPrint[s[i]]=1;
		}
	}
	cout<<endl;	
	for(int i=0;i<s.size();){ 
		cout<<s[i];
		if(!hasht[s[i]]) i+=k;
		else i+=1;
	}
	return 0;
}
