For two rational numbers, your task is to implement the basic arithmetics, that is, to calculate their sum, difference, product and quotient.

Input Specification:

Each input file contains one test case, which gives in one line the two rational numbers in the format a1/b1 a2/b2. The numerators and the denominators are all in the range of long int. If there is a negative sign, it must appear only in front of the numerator. The denominators are guaranteed to be non-zero numbers.

Output Specification:

For each test case, print in 4 lines the sum, difference, product and quotient of the two rational numbers, respectively. The format of each line is number1 operator number2 = result. Notice that all the rational numbers must be in their simplest form k a/b, where k is the integer part, and a/b is the simplest fraction part. If the number is negative, it must be included in a pair of parentheses. If the denominator in the division is zero, output Inf as the result. It is guaranteed that all the output integers are in the range of long int.

Sample Input 1:

2/3 -4/2


Sample Output 1:

2/3 + (-2) = (-1 1/3)2/3 - (-2) = 2 2/32/3 * (-2) = (-1 1/3)2/3 / (-2) = (-1/3)

Sample Input 2:

5/3 0/6


Sample Output 2:

1 2/3 + 0 = 1 2/31 2/3 - 0 = 1 2/31 2/3 * 0 = 01 2/3 / 0 = Inf

题意：给出两个分数，让你求出他的和差积商并按格式输出其最简形式，其中负数需要加上括号，带分数只需要前面的整数部分加上负号即可，。

思路：使用辗转相除法求最大公约数，写一个化简函数化简分子和分母。再写一个输出函数，专门输出数据。注意两个分数相乘可能会超过int型，因此使用long long定义。

参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
#include<iostream>
using namespace std;
struct node{
	long long up,down;
}a,b;
long long gcd(long long a,long long b){
	if(b==0) return a;
	else return gcd(b,a%b);
}
void reduction(node& a){
	long long d=gcd(abs(a.up),abs(a.down));
	if(a.down<0) {
		a.up=-a.up;
		a.down=-a.down;
	}
	a.up/=d;
	a.down/=d;
}
void print(node a){
	reduction(a);
	if(a.up==0) printf("0");
	else if(a.down==0) printf("Inf");
	else {
		if(a.up<0) printf("(");
		if(abs(a.up)<abs(a.down)) printf("%lld/%lld",a.up,a.down);
		else if(a.up%a.down==0) printf("%lld",a.up/a.down);
		else{
			printf("%lld %lld/%lld",a.up/a.down,abs(a.up%a.down),a.down);
		}
		if(a.up<0) printf(")");
	}
}
void add(node a,node b){
	node ans;
	ans.up=a.up*b.down+a.down*b.up;
	ans.down=a.down*b.down;
	reduction(ans);
	print(a);printf(" + ");print(b);printf(" = "); print(ans);printf("\n");
}
void sub(node a,node b){
	node ans;
	ans.up=a.up*b.down-a.down*b.up;
	ans.down=a.down*b.down;
	reduction(ans);
	print(a);printf(" - ");print(b);printf(" = "); print(ans);printf("\n");
}
void mul(node a,node b){
	node ans;
	ans.up=a.up*b.up;
	ans.down=a.down*b.down;
	reduction(ans);
	print(a);printf(" * ");print(b);printf(" = "); print(ans);printf("\n");
}
void div(node a,node b){
	node ans;
	ans.up=a.up*b.down;
	ans.down=a.down*b.up;
	reduction(ans);
	print(a);printf(" / ");print(b);printf(" = "); print(ans);printf("\n");
}
int main()
{
	scanf("%lld/%lld %lld/%lld",&a.up,&a.down,&b.up,&b.down);
	add(a,b);
	sub(a,b);
	mul(a,b);
	div(a,b);
	return 0;
}
