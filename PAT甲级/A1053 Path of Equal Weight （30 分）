Given a non-empty tree with root RRR, and with weight WiW_iW​i​​ assigned to each tree node TiT_iT​i​​. The weight of a path from RRR to LLL is defined to be the sum of the weights of all the nodes along the path from RRR to any leaf node LLL.

Now given any weighted tree, you are supposed to find all the paths with their weights equal to a given number. For example, let's consider the tree showed in the following figure: for each node, the upper number is the node ID which is a two-digit number, and the lower number is the weight of that node. Suppose that the given number is 24, then there exists 4 different paths which have the same given weight: {10 5 2 7}, {10 4 10}, {10 3 3 6 2} and {10 3 3 6 2}, which correspond to the red edges in the figure.



Input Specification:

Each input file contains one test case. Each case starts with a line containing 0<N≤1000 < N \le 1000<N≤100, the number of nodes in a tree, MMM (<N< N<N), the number of non-leaf nodes, and 0<S<2300 < S < 2^{30}0<S<2​30​​, the given weight number. The next line contains NNN positive numbers where WiW_iW​i​​ (<1000<1000<1000) corresponds to the tree node TiT_iT​i​​. Then MMM lines follow, each in the format:

ID K ID[1] ID[2] ... ID[K]


where ID is a two-digit number representing a given non-leaf node, K is the number of its children, followed by a sequence of two-digit ID's of its children. For the sake of simplicity, let us fix the root ID to be 00.

Output Specification:

For each test case, print all the paths with weight S in non-increasing order. Each path occupies a line with printed weights from the root to the leaf in order. All the numbers must be separated by a space with no extra space at the end of the line.

Note: sequence {A1,A2,⋯,An}\{A_1, A_2, \cdots , A_n\}{A​1​​,A​2​​,⋯,A​n​​} is said to be greater than sequence {B1,B2,⋯,Bm}\{B_1, B_2, \cdots , B_m\}{B​1​​,B​2​​,⋯,B​m​​} if there exists 1≤k<min{n,m}1 \le k < min\{n, m\}1≤k<min{n,m} such that Ai=BiA_i = B_iA​i​​=B​i​​ for i=1,⋯,ki=1, \cdots , ki=1,⋯,k, and Ak+1>Bk+1A_{k+1} > B_{k+1}A​k+1​​>B​k+1​​.

Sample Input:

20 9 2410 2 4 3 5 10 2 18 9 7 2 2 1 3 12 1 8 6 2 200 4 01 02 03 0402 1 0504 2 06 0703 3 11 12 1306 1 0907 2 08 1016 1 1513 3 14 16 1717 2 18 19

Sample Output:

10 5 2 710 4 1010 3 3 6 210 3 3 6 2

题意：给定一棵树（根节点编号0），其中每个结点都有权重weight，再给出一个指定的权重s，让你找出这棵树上所有权重之和等于s的路径。并把这些路径按照点权从大到小输出。

思路：首先给树的结点建立结构体，内容包括编号，权值，子节点数组。建树完成以后，对这棵树执行DFS，并在遍历过程中记录总权值和访问过的结点权重，最后当访问到叶节点并且总权值恰好为给定权值s时，输出路径。由于路径的输出要按照从大    到小输出。因此建树时，对孩子结点数组按权值从大到小排序，最后顺序遍历即可。

参考代码：
--------------------- 
#include<cstdio>
#include<vector>
#include<algorithm>
using namespace std;
struct node{
	int num,weight;
	vector<int> child;
}a[100];
bool cmp(int i,int j){		//按孩子节点的权重从大到小排序
	return a[i].weight>a[j].weight;
}
int n,m,s;
void dfs(int root,int sum,vector<int>& path)	//sum为路径总权重，path保存访问过的结点
{
	path.push_back(a[root].weight);			
	sum+=a[root].weight;
	if(sum==s&&a[root].child.size()==0){	//叶节点且总权值等于s时输出
		for(int i=0;i<path.size();i++){
			printf("%d",path[i]);
			if(i<path.size()-1) printf(" ");
		}
		printf("\n");
		path.pop_back();
		return;
	}
	for(int i=0;i<a[root].child.size();i++){
		if(sum<s)
			dfs(a[root].child[i],sum,path);
	}
	path.pop_back();	//当前结点遍历完成后恢复path状态
}
int main()
{
	int sum=0,root,num,w;
	vector<int> path;
	scanf("%d%d%d",&n,&m,&s);
	for(int i=0;i<n;i++)
		scanf("%d",&a[i].weight);
	for(int i=0;i<m;i++){
		scanf("%d%d",&root,&num);
		for(int j=0;j<num;j++){
			scanf("%d",&w);
			a[root].child.push_back(w);
		}
		sort(a[root].child.begin(),a[root].child.end(),cmp);
	}
	dfs(0,sum,path);
	return 0;
}
