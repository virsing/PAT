Look-and-say sequence is a sequence of integers as the following:

D, D1, D111, D113, D11231, D112213111, ...


where D is in [0, 9] except 1. The (n+1)st number is a kind of description of the nth number. For example, the 2nd number means that there is one D in the 1st number, and hence it is D1; the 2nd number consists of one D (corresponding to D1) and one 1 (corresponding to 11), therefore the 3rd number is D111; or since the 4th number is D113, it consists of one D, two 1's, and one 3, so the next number must be D11231. This definition works for D = 1 as well. Now you are supposed to calculate the Nth number in a look-and-say sequence of a given digit D.

Input Specification:

Each input file contains one test case, which gives D (in [0, 9]) and a positive integer N (≤ 40), separated by a space.

Output Specification:

Print in a line the Nth number in a look-and-say sequence of D.

Sample Input:

1 8


Sample Output:

1123123111


题意：给出一个数字d，再给出迭代次数n，让你按要求输出d在迭代n次后的数字，规则如下：

设第一项为d，

第二项为d1，其中d为上一项的第一位数字，1为d连续出现的次数。

第三项为d111，其中d1，表示d出现了一次，11表示1出现了1次。

第四项为d113，规则同理等等。

思路：使用两个while循环，第一个while控制第n项，第二个while用来处理字符串s，具体处理上，使用i指向当前数字，用cnt统计s[i]出现的次数，并把s[i]和次数cnt加入到答案字符串ans的后面，重复此操作直到字符串结束。

参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
#include<string>
#include<iostream>
using namespace std;
int main()
{
	int n;
	string s;
	cin>>s>>n;
	while(--n){
		string ans="";
		int i=0;
		while(i<s.size()){
			int cnt=1,j=i+1;	//cnt统计s[i]出现的次数
			while(j<s.size()&&s[j]==s[i]) {
				j++;
				cnt++;
			}
			ans+=s[i];
			ans+=to_string((long long)cnt);
			i=j;
		}
		s=ans;
	}
	cout<<s<<endl;
	return 0;
}
