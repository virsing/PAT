Formation is very important when taking a group photo. Given the rules of forming K rows with N people as the following:


	The number of people in each row must be N/K (round down to the nearest integer), with all the extra people (if any) standing in the last row;
	
	
	All the people in the rear row must be no shorter than anyone standing in the front rows;
	
	
	In each row, the tallest one stands at the central position (which is defined to be the position (m/2+1), where m is the total number of people in that row, and the division result must be rounded down to the nearest integer);
	
	
	In each row, other people must enter the row in non-increasing order of their heights, alternately taking their positions first to the right and then to the left of the tallest one (For example, given five people with their heights 190, 188, 186, 175, and 170, the final formation would be 175, 188, 190, 186, and 170. Here we assume that you are facing the group so your left-hand side is the right-hand side of the one at the central position.);
	
	
	When there are many people having the same height, they must be ordered in alphabetical (increasing) order of their names, and it is guaranteed that there is no duplication of names.
	
Now given the information of a group of people, you are supposed to write a program to output their formation.

Input Specification:

Each input file contains one test case. For each test case, the first line contains two positive integers N (≤10​4​​), the total number of people, and K (≤10), the total number of rows. Then N lines follow, each gives the name of a person (no more than 8 English letters without space) and his/her height (an integer in [30, 300]).

Output Specification:

For each case, print the formation -- that is, print the names of people in K lines. The names must be separated by exactly one space, but there must be no extra space at the end of each line. Note: since you are facing the group, people in the rear rows must be printed above the people in the front rows.

Sample Input:

10 3Tom 188Mike 170Eva 168Tim 160Joe 190Ann 168Bob 175Nick 186Amy 160John 159

Sample Output:

Bob Tom Joe NickAnn Mike EvaTim Amy John

题意：给出n个人的姓名与身高，以及总的站的排数，让你按照规则把他们排成群组照相的阵型。排队规则为：

①按身高从前往后站，后面一排的身高均大于等于前面一排

②除最后一排以外每排人数均为n/k，其余人数站最后一排。

③每一排最高的站中间（中间点为m/2，m为本排人数），然后围绕中心按照先左后右的顺序，按身高依次排队。

④在对身高排序时，按身高降序排列，如果身高相同按姓名字母升序排列。

思路： 首先求出每排的人数存放在数组row[]中，然后对所有人排序，再依次把所有人按规则一排一排的存放在二维数组中，最后输出二维数组。

参考代码：
--------------------- 
#include<cstdio>
#include<iostream>
#include<string>
#include<vector>
#include<algorithm>
using namespace std;
int n,k,idx=0;
string ans[20][10010];
struct node{
	int height;
	string name;
}a[10010];
bool cmp(node a,node b){
	if(a.height!=b.height) return a.height>b.height;
	else return a.name<b.name;
}
int main()
{
	scanf("%d%d",&n,&k);
	vector<int> row(k);
	for(int i=k-1;i>=0;i--){	//row存放每排的人数
		if(i!=0)
			row[i]=n/k;
		else row[i]=n-(k-1)*n/k;
	}
	for(int i=0;i<n;i++){
		cin>>a[i].name>>a[i].height;
	}
	sort(a,a+n,cmp);
	for(int i=0;i<k;i++){
		int central=row[i]/2,pos=central,p=1,cnt=1;	//central为每排中心位置，cnt统计本排已经拍好的人数
		ans[i][pos]=a[idx++].name;
		while(cnt<row[i]){
			if(cnt%2==1)
				ans[i][pos-p]=a[idx++].name;
			else {
				ans[i][pos+p]=a[idx++].name;
				p++;
			}
			cnt++;
		}
	}
	for(int i=0;i<k;i++){
		for(int j=0;j<row[i];j++){
			if(j!=0) cout<<" ";
			cout<<ans[i][j];
		}
		cout<<endl;
	}
	return 0;
}
