Eva loves to collect coins from all over the universe, including some other planets like Mars. One day she visited a universal shopping mall which could accept all kinds of coins as payments. However, there was a special requirement of the payment: for each bill, she must pay the exact amount. Since she has as many as 10​4​​ coins with her, she definitely needs your help. You are supposed to tell her, for any given amount of money, whether or not she can find some coins to pay for it.

Input Specification:

Each input file contains one test case. For each case, the first line contains 2 positive numbers: N (≤10​4​​, the total number of coins) and M (≤10​2​​, the amount of money Eva has to pay). The second line contains N face values of the coins, which are all positive numbers. All the numbers in a line are separated by a space.

Output Specification:

For each test case, print in one line the face values V​1​​≤V​2​​≤⋯≤V​k​​ such that V​1​​+V​2​​+⋯+V​k​​=M. All the numbers must be separated by a space, and there must be no extra space at the end of the line. If such a solution is not unique, output the smallest sequence. If there is no solution, output "No Solution" instead.

Note: sequence {A[1], A[2], ...} is said to be "smaller" than sequence {B[1], B[2], ...} if there exists k≥1 such that A[i]=B[i] for all i<k, and A[k] < B[k].

Sample Input 1:

8 95 9 8 7 2 3 4 1

Sample Output 1:

1 3 5


Sample Input 2:

4 87 2 4 3

Sample Output 2:

No Solution


题意：eva有n枚硬币，需要支付价值为m的物品，让你找出恰好相等的支付方案，如果有多种，选择序列最小的方案。

思路：

1. 01背包问题，使用动态规划解决。令数组dp[i][v]表示前i件物品在容量为v时，所获得的最大价值，则状态转移方程为

dp[i][v]=max(dp[i-1][v-w[i]]+val[i],dp[i-1][v])，其中w是物品的质量数组，val为物品价值数组。

2. 本题中w和val为同一数组，可以合并。由于最终结果需要输出具体选择方案，因此在迭代求解过程中，使用choice[i][v]数组,记录第i轮质量为v时的选择情况。

最后当dp[n][m]!=m时说明无解，若有解，则用flag[]数组标记出最终结果的选择方案，然后输出。 

3. 在迭代求最大价值数组时，由于第i轮只需用到第i-1轮的结果因此可以把二维数组优化成一维数组，但要注意从后往前计算重量。

4. 由于最终结果要求输出较小的物品重量方案，因此先对所有物品从大到小排序，在迭代过程中，当第i件物品选择与不选择价值相同时，应该选择这件物品以获得较小的物品质量序列。

参考代码：
--------------------- 
#include<cstdio>
#include<algorithm>
using namespace std;
int n,m,w[10010],dp[110],choice[10010][110],flag[10010];
bool cmp(int a,int b){
	return a>b;
}
int main()
{
	scanf("%d%d",&n,&m);
	for(int i=1;i<=n;i++)
		scanf("%d",&w[i]);
	sort(w+1,w+n+1,cmp);
	for(int i=1;i<=n;i++){
		for(int v=m;v>=w[i];v--){
			if(dp[v]<=dp[v-w[i]]+w[i]){		//为了获得较小的结果序列，等于时也放
				dp[v]=dp[v-w[i]]+w[i];
				choice[i][v]=1;
			}else
				choice[i][v]=0;
		}
	}
	if(dp[m]!=m) printf("No Solution\n");
	else{
		int k=n,num=0,v=m;
		while(k){
			if(choice[k][v]==1){
				flag[k]=1;
				v-=w[k];
				num++;
			}else flag[k]=0;
			k--;
		}
		for(int i=n;i>0;i--){
			if(flag[i]){
				num--;
				printf(num?"%d ":"%d",w[i]);
			}
		}
		printf("\n");
	}
	return 0;
}
