An inorder binary tree traversal can be implemented in a non-recursive way with a stack. For example, suppose that when a 6-node binary tree (with the keys numbered from 1 to 6) is traversed, the stack operations are: push(1); push(2); push(3); pop(); pop(); push(4); pop(); pop(); push(5); push(6); pop(); pop(). Then a unique binary tree (shown in Figure 1) can be generated from this sequence of operations. Your task is to give the postorder traversal sequence of this tree.


Figure 1

Input Specification:

Each input file contains one test case. For each case, the first line contains a positive integer N (≤30) which is the total number of nodes in a tree (and hence the nodes are numbered from 1 to N). Then 2N lines follow, each describes a stack operation in the format: "Push X" where X is the index of the node being pushed onto the stack; or "Pop" meaning to pop one node from the stack.

Output Specification:

For each test case, print the postorder traversal sequence of the corresponding tree in one line. A solution is guaranteed to exist. All the numbers must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input:

6Push 1Push 2Push 3PopPopPush 4PopPopPush 5Push 6PopPop

Sample Output:

3 4 2 6 5 1


题意：在二叉树的非递归遍历中，可以使用栈来完成中序遍历， 给出一组数据的出入栈操作，让你输出这棵树对应的后序序列。

思路：入站顺序对应先序序列，出战顺序对应中序序列，本题相当于给定先序和中序序列求二叉树的后序序列，直接套用先序和中序序列建二叉树的模板完成建树在后序遍历输出即可。

参考代码：
--------------------- 
#include<cstdio>
#include<string>
#include<stack>
#include<vector>
#include<iostream>
using namespace std;
struct node{
	int data;
	node* lchild;
	node* rchild;
	node(int a):data(a),lchild(NULL),rchild(NULL){}
};
vector<int> pre,in;	//存储先序和中序序列
stack<int> st;
node* insert(int prel,int prer,int inl,int inr){	//完成建树
	if(prel>prer) return NULL;
	node* t=new node(pre[prel]);
	int k=inl;
	while(k<=inr&&in[k]!=pre[prel]) k++;
	int numL=k-inl;
	t->lchild=insert(prel+1,prel+numL,inl,k-1);
	t->rchild=insert(prel+numL+1,prer,k+1,inr);
	return t;
}
void postPrint(node* root,int& cnt){
	if(root==NULL) return;
	postPrint(root->lchild,cnt);
	postPrint(root->rchild,cnt);
	cnt++;
	if(cnt!=1) printf(" ");
	printf("%d",root->data);
}
int main()
{
	int n,t,cnt=0;
	string s;
	scanf("%d",&n);
	for(int i=0;i<2*n;i++){
		cin>>s;
		if(s.size()==3&&st.size()>0){
			in.push_back(st.top());
			st.pop();
		}else if(s.size()==4){
			cin>>t;
			st.push(t);
			pre.push_back(t);
		}
	}
	node* root=insert(0,n-1,0,n-1);
	postPrint(root,cnt);
	return 0;
}
