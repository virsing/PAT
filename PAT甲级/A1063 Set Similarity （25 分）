Given two sets of integers, the similarity of the sets is defined to be N​c​​/N​t​​×100%, where N​c​​ is the number of distinct common numbers shared by the two sets, and N​t​​ is the total number of distinct numbers in the two sets. Your job is to calculate the similarity of any given pair of sets.

Input Specification:

Each input file contains one test case. Each case first gives a positive integer N (≤50) which is the total number of sets. Then N lines follow, each gives a set with a positive M (≤10​4​​) and followed by M integers in the range [0,10​9​​]. After the input of sets, a positive integer K (≤2000) is given, followed by K lines of queries. Each query gives a pair of set numbers (the sets are numbered from 1 to N). All the numbers in a line are separated by a space.

Output Specification:

For each query, print in one line the similarity of the sets, in the percentage form accurate up to 1 decimal place.

Sample Input:

33 99 87 1014 87 101 5 877 99 101 18 5 135 18 9921 21 3

Sample Output:

50.0%33.3%

题意：给出若干个数字集合，然后定义集合相似度为Nc/Nt*100%，其中 Nc为两个集合中相同数字的总个数，要求Nc中每个数字均不同，Nt为两个集合中不同数字的总个数。

思路：使用unordered_map存储每个集合，然后再计算相同个数。

参考代码：
--------------------- 
#include<cstdio>
#include<unordered_map>
using namespace std;
int main()
{
	int n,num,t,q,id1,id2;
	scanf("%d",&n);
	unordered_map<int,bool> mp[52];
	for(int i=1;i<=n;i++){
		scanf("%d",&num);
		for(int j=0;j<num;j++){
			scanf("%d",&t);
			mp[i][t]=true;
		}
	}
	scanf("%d",&q);
	for(int i=0;i<q;i++){
		scanf("%d%d",&id1,&id2);
		int Nc=0,Nt;
		for(auto it=mp[id1].begin();it!=mp[id1].end();it++){
			if(mp[id2].find(it->first)!=mp[id2].end())
				Nc++;
		}
		Nt=mp[id1].size()+mp[id2].size()-Nc;
		printf("%.1f%%\n",(float)Nc/Nt*100);
	}
	return 0;
}
