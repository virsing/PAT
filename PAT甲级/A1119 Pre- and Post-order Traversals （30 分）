Suppose that all the keys in a binary tree are distinct positive integers. A unique binary tree can be determined by a given pair of postorder and inorder traversal sequences, or preorder and inorder traversal sequences. However, if only the postorder and preorder traversal sequences are given, the corresponding tree may no longer be unique.

Now given a pair of postorder and preorder traversal sequences, you are supposed to output the corresponding inorder traversal sequence of the tree. If the tree is not unique, simply output any one of them.

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (≤ 30), the total number of nodes in the binary tree. The second line gives the preorder sequence and the third line gives the postorder sequence. All the numbers in a line are separated by a space.

Output Specification:

For each test case, first printf in a line Yes if the tree is unique, or No if not. Then print in the next line the inorder traversal sequence of the corresponding binary tree. If the solution is not unique, any answer would do. It is guaranteed that at least one solution exists. All the numbers in a line must be separated by exactly one space, and there must be no extra space at the end of the line.

Sample Input 1:

71 2 3 4 6 7 52 6 7 4 5 3 1

Sample Output 1:

Yes2 1 6 4 7 3 5

Sample Input 2:

41 2 3 42 4 3 1

Sample Output 2:

No2 1 3 4

题意：给出一个二叉树的先序序列和后序序列，问你能否唯一确定一棵二叉树，如果能输出yes，并输出中序序列，否则输出no，并输出任意一个中序序列。

思路：给定二叉树的先序和后序序列，并不一定能唯一确定一棵二叉树，比如先序序列：3 ，4.后序序列：4，3，此时根结点的左右孩子不能唯一确定，可以假设这个节点是右孩子，然后执行先序和后续序列构造二叉树。首先先序第一个和后序最后一个一定为根结点，接下来，找出后序的倒数第二个节点（默认该节点为根的右孩子），然后在先序序列中找到这个节点，节点左侧为根的左子树，右侧为根的右子树进行递归建树，为了确定二叉树是否唯一，设置变量unique（=1），当某一个根节点在先序序列中的根的下一个节点和后序序列中的根前面那个节点相同表明此时二叉树状态不唯一。
--------------------- 

参考代码：
--------------------- 
#include<cstdio>
using namespace std;
const int maxn=10010;
int n,num=1,pre[maxn],post[maxn],Unique=1;
struct node{
	int data;
	node* lchild;
	node* rchild;
	node(int a):data(a),lchild(NULL),rchild(NULL){}
};
node* Create(int prel,int prer,int postl, int postr){
	if(prel>prer) return NULL;
	node* root=new node(pre[prel]);
	int k=prel+1;
	while(k<=prer&&pre[k]!=post[postr-1]) k++;
	if(prel+1<n&&postr-1>=0&&pre[prel+1]==post[postr-1]) Unique=false;		//如例子中状态先序根的下一个和后序根的前一个相同表明不唯一
	int numL=k-prel-1;					//统计左子树节点个数
	root->lchild=Create(prel+1,prel+numL,postl,postl+numL-1);
	root->rchild=Create(prel+numL+1,prer,postl+numL,postr-1);
	return root;
}
void inorder(node* root){	//中序输出
	if(root==NULL) return;
	inorder(root->lchild);
	if(num!=1) printf(" ");
	printf("%d",root->data);
	num++;
	inorder(root->rchild);
}
int main()
{
	scanf("%d",&n);
	for(int i=0;i<n;i++)
		scanf("%d",&pre[i]);
	for(int i=0;i<n;i++)
		scanf("%d",&post[i]);
	node* root=Create(0,n-1,0,n-1);
	if(Unique) printf("Yes\n");
	else printf("No\n");
	inorder(root);
	printf("\n");	//一定要输出个换行，否则会有格式错误
	return 0;
}
