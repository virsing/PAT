A Binary Search Tree (BST) is recursively defined as a binary tree which has the following properties:

The left subtree of a node contains only nodes with keys less than the node's key.
	The right subtree of a node contains only nodes with keys greater than or equal to the node's key.
	Both the left and right subtrees must also be binary search trees.
A Complete Binary Tree (CBT) is a tree that is completely filled, with the possible exception of the bottom level, which is filled from left to right.

Now given a sequence of distinct non-negative integer keys, a unique BST can be constructed if it is required that the tree must also be a CBT. You are supposed to output the level order traversal sequence of this BST.

Input Specification:

Each input file contains one test case. For each case, the first line contains a positive integer N (≤1000). Then N distinct non-negative integer keys are given in the next line. All the numbers in a line are separated by a space and are no greater than 2000.

Output Specification:

For each test case, print in one line the level order traversal sequence of the corresponding complete binary search tree. All the numbers in a line must be separated by a space, and there must be no extra space at the end of the line.

Sample Input:

101 2 3 4 5 6 7 8 9 0

Sample Output:

6 3 8 1 5 7 9 0 2 4


题意：给出一个完全二叉排序树的数据，让你输出这棵树的层序遍历序列。

思路1：由于总结点个数固定，所以完全BST树形就固定了，首先建立一棵空的完全二叉树，然后中序遍历把排序后的数据填入该空树中，然后层序遍历输出。

参考代码：
--------------------- 
#include<cstdio>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;
struct node{
	int data;
	node* lchild;
	node* rchild;
	node(int d=0,node* l=NULL,node* r=NULL):data(d),lchild(l),rchild(r){}
};
void CreateTree(node*& root,int n){
	queue<node*> q;
	q.push(root);
	while(n){
		node* p=q.front();
		q.pop();
		if(n)  {
			p->lchild=new node;
			q.push(p->lchild);
			n--;
			if(n==0) break;
		}
		if(n)  {
			p->rchild=new node;
			q.push(p->rchild);
			n--;
		}
	}
}
void inorder(node*& root,vector<int> a,int& d){
	if(root!=NULL){
		inorder(root->lchild,a,d);
		root->data=a[d++];
		inorder(root->rchild,a,d);
	}
}
void LevelBFS(node* root,int n){
	queue<node*> q;
	q.push(root);
	node* p;
	while(!q.empty()){
		p=q.front();
		q.pop();
		if(n>1)  printf("%d ",p->data);
		else printf("%d\n",p->data);
		n--;
		if(p->lchild!=NULL) q.push(p->lchild);
		if(p->rchild!=NULL) q.push(p->rchild);
	}
}
int main()
{
	int n,t,d=0;
	scanf("%d",&n);
	vector<int> a(n);
	for(int i=0;i<n;i++) 
		scanf("%d",&a[i]);
	sort(a.begin(),a.end());
	node* root=new node;
	CreateTree(root,n-1);
	inorder(root,a,d);
	LevelBFS(root,n);
	return 0;
}
