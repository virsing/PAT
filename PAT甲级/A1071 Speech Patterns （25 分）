People often have a preference among synonyms of the same word. For example, some may prefer "the police", while others may prefer "the cops". Analyzing such patterns can help to narrow down a speaker's identity, which is useful when validating, for example, whether it's still the same person behind an online avatar.

Now given a paragraph of text sampled from someone's speech, can you find the person's most commonly used word?

Input Specification:

Each input file contains one test case. For each case, there is one line of text no more than 1048576 characters in length, terminated by a carriage return \n. The input contains at least one alphanumerical character, i.e., one character from the set [0-9 A-Z a-z].

Output Specification:

For each test case, print in one line the most commonly occurring word in the input text, followed by a space and the number of times it has occurred in the input. If there are more than one such words, print the lexicographically smallest one. The word should be printed in all lower case. Here a "word" is defined as a continuous sequence of alphanumerical characters separated by non-alphanumerical characters or the line beginning/end.

Note that words are case insensitive.

Sample Input:

Can1: "Can a can can a can?  It can!"


Sample Output:

can 5


题意：给出一个字符串，让你找出其中出现最频繁的单词，单词包括（大小写字母和数字）。

思路：使用map完成映射并统计单词次数 ，由于最后要求输出小写，因此每次碰到大写字母就转成小写。

参考代码：
--------------------- 
#include<cstdio>
#include<string>
#include<iostream>
#include<algorithm>
#include<unordered_map>
using namespace std;
unordered_map<string,int> mp;
int main()
{
	string s,mx_word;		//mx_word标记最频繁的单词
	getline(cin,s);
	int i=0,mx=-1;	//mx标记最频繁单词的次数
	while(i<s.size()){
		if(s[i]>='A'&&s[i]<='Z') s[i]+=32;
		if(s[i]>='0'&&s[i]<='9'||s[i]>='a'&&s[i]<='z'){
			string word="";
			while(s[i]>='0'&&s[i]<='9'||s[i]>='a'&&s[i]<='z'){
				word+=s[i];
				i++;
			}
			mp[word]++;
			if(mx==-1) {
				mx_word=word;
				mx=mp[word];
			}else if(mp[word]>mx){
				mx=mp[word];
				mx_word=word;
			}else if(mp[word]==mx&&word<mx_word){
				mx_word=word;
			}
		}
		i++;
	}
	cout<<mx_word<<" "<<mx<<endl;
	return 0;
}
