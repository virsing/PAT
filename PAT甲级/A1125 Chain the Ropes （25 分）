Given some segments of rope, you are supposed to chain them into one rope. Each time you may only fold two segments into loops and chain them into one piece, as shown by the figure. The resulting chain will be treated as another segment of rope and can be folded again. After each chaining, the lengths of the original two segments will be halved.



Your job is to make the longest possible rope out of N given segments.

Input Specification:

Each input file contains one test case. For each case, the first line gives a positive integer N (2≤N≤10​4​​). Then N positive integer lengths of the segments are given in the next line, separated by spaces. All the integers are no more than 10​4​​.

Output Specification:

For each case, print in a line the length of the longest possible rope that can be made by the given segments. The result must be rounded to the nearest integer that is no greater than the maximum length.

Sample Input:

810 15 12 3 4 13 1 15

Sample Output:

14


题意：给出n个绳子，让你把这些绳子， 每两个系在一起对折拧成一股绳，重复此操作，直到只剩下一段绳子为止。让你求能得到的最大绳长。

思路：由于越早加入的绳子对折的次数越多，因此最终也就会越短，所以先把短的绳子加入，然后再放长的绳子，具体实现可以使用一个优先级队列（升序方式），每次取出较小的两个数，对折再放进去，直到只剩下一个数字为止。

参考代码：
--------------------- 
#include<cstdio>
#include<queue>
using namespace std;
int n,t;
priority_queue<int,deque<int>,greater<int> > q;
int main()
{
	scanf("%d",&n);
	for(int i=0;i<n;i++){
		scanf("%d",&t);
		q.push(t);
	}
	while(q.size()>1){
		int a=q.top();q.pop();
		int b=q.top();q.pop();
		q.push((a+b)/2);
	}
	printf("%d\n",q.top());
	return 0;
}
