The "Hamilton cycle problem" is to find a simple cycle that contains every vertex in a graph. Such a cycle is called a "Hamiltonian cycle".

In this problem, you are supposed to tell if a given cycle is a Hamiltonian cycle.

Input Specification:

Each input file contains one test case. For each case, the first line contains 2 positive integers N (2<N≤200), the number of vertices, and M, the number of edges in an undirected graph. Then M lines follow, each describes an edge in the format Vertex1 Vertex2, where the vertices are numbered from 1 to N. The next line gives a positive integer K which is the number of queries, followed by K lines of queries, each in the format:

n V​1​​ V​2​​ ... V​n​​

where n is the number of vertices in the list, and V​i​​'s are the vertices on a path.

Output Specification:

For each query, print in a line YES if the path does form a Hamiltonian cycle, or NO if not.

Sample Input:

6 106 23 41 52 53 14 11 66 31 24 567 5 1 4 3 6 2 56 5 1 4 3 6 29 6 2 1 6 3 4 5 2 64 1 2 5 17 6 1 3 4 5 2 67 6 1 2 5 4 3 1

Sample Output:

YESNONONOYESNO

题意：给出一个无向图，再给你q条路径，问你这些路径是否是简单圈。简单圈的定义是：要遍历图中所有顶点，且除了首尾顶点外，不能有重复顶点。

思路：根据简单圈的定义，判断给定的路径是否满足：联通，首尾相等，顶点总数等于图中顶点数+1，访问到了图中所有顶点这四个条件。 

参考代码：
--------------------- 
#include<cstdio>
#include<cstring>
using namespace std;
int G[210][210],vis[210],n,m,q;	//a存放给出的顶点序列
int main()
{
	int u,v,num,st;
	scanf("%d%d",&n,&m);
	for(int i=0;i<m;i++){
		scanf("%d%d",&u,&v);
		G[u][v]=G[v][u]=1;
	}
	scanf("%d",&q);
	for(int i=0;i<q;i++){
		bool tag=true;
		scanf("%d%d",&num,&st);
		memset(vis,0,sizeof(vis));
		u=st;
		for(int j=1;j<num;j++){
			scanf("%d",&v);
			if(G[u][v]!=1) tag=false;	//判断连通性
			vis[v]=1;
			u=v;
		}
		if(num!=n+1||st!=u) tag=false;
		for(int j=1;j<=n;j++)	//判断是否遍历了全部顶点
			if(vis[j]!=1) tag=false;
		if(tag) printf("YES\n");
		else printf("NO\n");
	}
	return 0;
}
